[{"content":"hugo 安装 Mac 安装 hugo 命令如下：\nbrew install hugo 运行如下命令验证：\nhugo version 创建一个新的站点 可以先创建一个文件夹，然后 cd 到该文件夹，运行 hugo new site .；也可以直接运行 hugo new site \u0026lt;hugo_dir\u0026gt;，这样可以在当前目录下创建一个名为 \u0026lt;hugo_dir\u0026gt; 的 hugo 文件夹。\n添加一个主题 主题可以在 https://themes.gohugo.io/ 中找，最终我选择了 Zzo 这个主题。\ncd \u0026lt;hugo_dir\u0026gt; git init git submodule add https://github.com/zzossig/hugo-theme-zzo.git themes/zzo 其中，git submodule add https://github.com/zzossig/hugo-theme-zzo.git themes/zzo 使用自己选择的主题提供的命令。\n修改配置 这步其实不同的主题差异性很大，以 Zzo 为例，首先需要将 \u0026lt;hugo_dir\u0026gt;/themes/zzo/exampleSite 目录下的 config, content, resources, static 文件夹拷贝到 \u0026lt;hugo_dir\u0026gt; 下进行覆盖替换。主要修改的就是这几个目录。\nconfig，修改最多的目录，主要存各种配置文件；content，里面存放这发布后的内容，发布前需要清除默认的内容，换成自己的内容即可；static 里面主要修改一些 logo 等图片资源。\nconfig 中的修改主要参考 https://zzo-docs.vercel.app/zzo/configuration/configfiles/\nstatic 主要修改 logo 和 favicon,主要参考 https://zzo-docs.vercel.app/zzo/userguide/favicon/\n注意，themes/zzo/ 下的文件不要改动，如果确实需要改动，可以在 \u0026lt;hugo_dir\u0026gt; 下找到对应的文件修改，如果不存在可以 copy 一份进行修改。\n本地运行 cd \u0026lt;hugo_dir\u0026gt; 后，运行 hugo server，然后访问 http://localhost:1313/ 就可以看到修改效果了。\n托管 修改效果满意后，可以托管到如 GitHub Pages 上，主流的托管方式有两种：\n 源目录在本地，构建的静态文件托管到远端 源目录和构建的静态文件都在远端，可以通过 GitHub Actions 进行自动构建。  不论哪种方式托管，首先需要在 GitHub 上创建一个 \u0026lt;yourname\u0026gt;.github.io 名字的仓库，将构建好的静态文件 push 到这个仓库才可以搭建成功。\n只托管静态文件 将 public 目录作为 submodule 提交的 GitHub Pages 仓库。\ncd \u0026lt;hugo_dir\u0026gt; rm -rf public git submodule add -b master https://github.com/\u0026lt;yourname\u0026gt;/\u0026lt;yourname\u0026gt;.github.io.git public hugo -t \u0026lt;yourtheme\u0026gt; cd public git add . git commit -m \u0026quot;first commit\u0026quot; git push origin main 这些操作有点麻烦，可以采用官方提供的脚本，将下面内容保存到 deploy.sh 中。\n#!/bin/sh # If a command fails then the deploy stops set -e # Print out commands before executing them set -x printf \u0026quot;\\033[0;32mDeploying updates to GitHub...\\033[0m\\n\u0026quot; # Build the project. hugo -t \u0026lt;yourtheme\u0026gt; # Go To Public folder cd public # Add changes to git. git add . # Commit changes. msg=\u0026quot;rebuilding site $(date)\u0026quot; if [ -n \u0026quot;$*\u0026quot; ]; then msg=\u0026quot;$*\u0026quot; fi git commit -m \u0026quot;$msg\u0026quot; # Push source and build repos. git push origin main # Back to the origin folder # cd .. # rm -rf public 接下来就可以使用 ./deploy.sh \u0026quot;Your optional commit message\u0026quot; 提交静态页面到 .github.io 上。\n使用 GitHub Actions 构建 配置 github_token  生成个人令牌：GitHub 账号下的 Setting -\u0026gt; Developer setting -\u0026gt; Personal access tokens-\u0026gt; Generate，生成并记录下来。 添加 secret ：回到 GitHub 账号 yourname.github.io 仓库下的 settings -\u0026gt; secret -\u0026gt; add。添加进刚才生成 token，要特别注意变量名 Name 要设置为\u0026quot;GITHUB_TOKEN\u0026quot; 的格式并记录下来，以便后面配置 Action 时 yaml 文件的调用。  配置 GitHub Actions 在 yourname.github.io 仓库下，选择 \u0026ldquo;Actions\u0026rdquo;，新建 Action -\u0026gt; Simple workflow ，之后会跳转到一个编辑 yaml 文件的页面，修改 yml 文件名为 gh-pages.yml。会在仓库的 main 分支下生成 .github/workflows/gh-pages.yaml 文件。\nname: github pages on: push: branches: - main # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-20.04 steps: - uses: actions/checkout@v2 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: 'latest' # extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.ref == 'refs/heads/main' with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public 如果需要自定义域名指向，在最后一行 public_dir 下面加上 cname: \u0026lt;yourname.github.io\u0026gt; 即可。\n将 GitHub Pages 分支设置为 gh_pages 再到 Settings -\u0026gt; Pages 选项下，修改 Source 源分支为 gh-pages，点击 save。\n添加 .gitignore 文件 为了防止将 public 目录也 commit 到代码库中，需要在 \u0026lt;hugo_dir\u0026gt; 中添加一个 .gitignore 文件。\n.DS_Store */.DS_Store public/ 加 DS_Store 相关是因为 MacOS 会自动生成这些文件，如果不是 MacOS 可以删掉。\n将 \u0026lt;hugo_dir\u0026gt; 下的仓库提交到 GitHub 这里假定 GitHub 上新建的 yourname.github.io 仓库中没有任何内容。\n1 2 3 4 5 6  cd \u0026lt;hugo_dir\u0026gt; rm -rf public/ git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin git@github.com:\u0026lt;yourname\u0026gt;/\u0026lt;yourname.github.io\u0026gt; git push -u origin main   提交到 main 分支后，脚本会自动构建到 gh-pages 分支，访问 https://yourname.github.io 就可以看到 Blog。\n搭建遇到的问题 在搭建中遇到了一些问题，记录下避坑。\n主题问题 主要是在本地配置中，遇到的一些与修改主题相关的问题。\n多语言问题 因为 Zoo 主题支持多语言，所以打算弄一个中文，进行下面设置：\n 在 config.toml 中设置 defaultContentLanguage = \u0026quot;cn\u0026quot; 在 languages.toml 中配置了 cn 在 content 目录下简历 cn 目录  但是折腾半天，启动后可以选择到该语言也能正常显示内容，就是样式和 js 显示异常。\n后来发现 theme/zzo/i18n/ 下面关于中文的一些文件将中文定义为 zh，将上面这些配置中的 cn 改成 zh 后，解决了该问题。\n评论问题 Zzo 主题支持多种评论系统，只需要配置下就可以，朋友推荐使用 utterances，在 params.toml 有配置，如下:\n[utterances] # https://utteranc.es/ owner = \u0026quot;codekeeperjava\u0026quot; # Your GitHub ID repo = \u0026quot;https://codekeeperjava.github.io\u0026quot; # The repo to store comments 这样配置无法显示 utterances, 需要将 repo 中的 https:// 去掉。\n托管问题 托管的选型问题\n选择 GitHub Actions 还是只托管静态文件 GitHub Actions 的方式，可以把源文件和构建好的文件都 push 到 GitHub 上备份还是很方便的，去另一台电脑 clone 下仓库就可以进行编辑。但同时，如果自己内容较多时，可能被别人直接 download 将所有“财产”拖走。\n只托管静态文件，一般需要将源文件用 dropbox 等同步，并且比 GitHub Actions 还要多很多步骤：构建，将 publich push 到 GitHub。当然这种方式比较安全，别人不能直接 download 自己的“财产”。\n综合考虑，目前我自己只有几篇博文，所以别人可能也没有兴趣，所以选择了方便的方式(GitHub Actions)。\n参考  Hugo+GitHub Action+GitHub Pages搭建个人博客 把博客从 Hexo 迁移到 Hugo 给 Hugo even 主题添加 utterances 评论系统 使用Hugo和GitHub搭建博客  ","description":"","id":0,"section":"posts","tags":["hugo"],"title":"通过 Hugo 和 GitHub Pages 搭建博客","uri":"https://dotleo.cn/posts/build_blog_by_hugo/"},{"content":"使用 vim 最大的痛点就是使用时中英文切换的问题，但插件可以帮我们自动切换，进入 normal 模式则自动切换为英文，进入 insert 模式恢复之前的输入法。\n目前了解有 3 种方案：smartim 、vim-xkbswitch 和 vim-barbaric\nsmartim https://github.com/ybian/smartim\n该插件支持 Windows 和 MacOS，需要依赖 im-select ：\n1  curl -Ls https://raw.githubusercontent.com/daipeihust/im-select/master/install_mac.sh | sh   然后安装该插件即可：\n1  Plug \u0026#39;ybian/smartim\u0026#39;   im-select 使用 com.apple.keylayout.US 作为默认输入法，因此需要确保有该英文输入法。\n该插件会在 CPU 较高时延迟较大，表现为当从 normal 模式进入 insert 模式后，需要等待 \u0026lt; 1s 才能进行中文输入。我经常碰到这种情况，并为此困惑。\nvim-xkbswitch https://github.com/lyokha/vim-xkbswitch\n该插件暂时没有使用，朋友推荐并且 star 数比 smartim 还要高，等 smartim 出现问题时作为备选方案。\nvim-barbaric https://github.com/rlue/vim-barbaric\n同上\n参考  https://jdhao.github.io/2021/02/25/nvim_ime_mode_auto_switch/  ","description":"","id":1,"section":"posts","tags":["vim"],"title":"vim 自动切换中英文","uri":"https://dotleo.cn/posts/vim-autoswitch-im/"},{"content":"dotleo, a developer who mainly uses Java language.\nGithub address: https://github.com/codekeeperjava\n","description":"dotleo about page","id":2,"section":"","tags":null,"title":"About","uri":"https://dotleo.cn/about/"}]